// Prisma schema file for Neemee Frontend
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")        // Automatically uses correct DB based on environment
  directUrl = env("DIRECT_URL")    // Direct connection for migrations (optional)
}

// Authentication and User Management Models

/// User accounts in the system, supporting OAuth authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  notes     Note[]
  notebooks Notebook[]
  profiles  UserProfile[]
  accounts  Account[]
  sessions  Session[]
  apiKeys   UserApiKey[]

  @@map("user")
}

/// OAuth account information for third-party authentication providers
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// Active user sessions for authentication state management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

/// Email verification tokens for account verification
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// API keys for programmatic access to user data via MCP and other integrations
model UserApiKey {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String    // User-friendly name for the key
  keyHash     String    @unique @map("key_hash") // Hashed API key
  keyPreview  String?   @map("key_preview") // First 4 + last 4 chars of actual key (e.g., "abcd****wxyz")
  scopes      String[]  // Permissions: ["read", "write", "admin"]
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([keyHash])
  @@index([userId])
  @@map("user_api_keys")
}

// Core Knowledge Management Models

/// Notes containing captured web content or user-created content with dynamic frontmatter
model Note {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  noteTitle       String    @map("note_title")
  pageUrl         String?   @map("page_url")
  content         String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  frontmatter     Json?     @default("{}") // Dynamic JSONB frontmatter fields
  notebookId      String?   @map("notebook_id")

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  notebook        Notebook? @relation(fields: [notebookId], references: [id], onDelete: SetNull)

  @@map("notes")
}

/// Organizational containers for grouping related notes
model Notebook {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  frontmatter Json?    @default("{}") // Dynamic JSONB frontmatter fields

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@map("notebooks")
}


// User Preferences and Organization Models

/// Extended user profile information and application preferences
model UserProfile {
  id          String    @id
  fullName    String?   @map("full_name")
  username    String?   @unique
  avatarUrl   String?   @map("avatar_url")
  bio         String?
  preferences Json?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [id], references: [id])

  @@map("user_profiles")
}


