// Prisma schema file for Neemee Frontend
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")        // Automatically uses correct DB based on environment
  directUrl = env("DIRECT_URL")    // Direct connection for migrations
}

// Authentication and User Management Models

/// User accounts in the system, supporting OAuth authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  notes     Note[]
  notebooks Notebook[]
  profiles  UserProfile[]
  accounts  Account[]
  sessions  Session[]
  apiKeys   UserApiKey[]

  @@map("user")
}

/// OAuth account information for third-party authentication providers
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// Active user sessions for authentication state management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

/// Email verification tokens for account verification
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// API keys for programmatic access to user data via MCP and other integrations
model UserApiKey {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String    // User-friendly name for the key
  keyHash     String    @unique @map("key_hash") // Hashed API key
  keyPreview  String?   @map("key_preview") // First 4 + last 4 chars of actual key (e.g., "abcd****wxyz")
  scopes      String[]  // Permissions: ["read", "write", "admin"]
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([keyHash])
  @@index([userId])
  @@map("user_api_keys")
}

// Core Knowledge Management Models

/// Notes containing captured web content or user-created content with dynamic frontmatter
model Note {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  noteTitle       String    @map("note_title")
  pageUrl         String?   @map("page_url")
  content         String
  domain          String
  metadata        Json?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  frontmatter     Json?     @default("{}") // Dynamic JSONB frontmatter fields
  notebookId      String?   @map("notebook_id")

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  notebook        Notebook? @relation(fields: [notebookId], references: [id], onDelete: SetNull)
  noteEntities    NoteEntity[]
  entityRelationships EntityRelationship[]
  collections     NoteCollection[]
  processingJobs  ProcessingJob[]

  @@map("notes")
}

/// Organizational containers for grouping related notes
model Notebook {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@map("notebooks")
}

// AI-Powered Content Analysis Models

/// Extracted entities from note content (people, places, technologies, concepts)
model Entity {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  name            String
  type            String
  description     String?
  aliases         String[]
  confidenceScore Float?    @map("confidence_score")
  mentionCount    Int?      @default(0) @map("mention_count")
  firstMentionedAt DateTime? @map("first_mentioned_at")
  lastMentionedAt DateTime? @map("last_mentioned_at")
  metadata        Json?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  // Relations
  noteEntities    NoteEntity[]
  sourceRelationships EntityRelationship[] @relation("SourceEntity")
  targetRelationships EntityRelationship[] @relation("TargetEntity")

  @@map("entities")
}

/// Junction table linking notes to entities with relevance scoring
model NoteEntity {
  id              String  @id @default(cuid())
  noteId          String  @map("note_id")
  entityId        String  @map("entity_id")
  relevanceScore  Float?  @map("relevance_score")
  contextPosition Int?    @map("context_position")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  note   Note   @relation(fields: [noteId], references: [id])
  entity Entity @relation(fields: [entityId], references: [id])

  @@map("note_entities")
}

/// Relationships between entities with contextual information
model EntityRelationship {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  sourceEntityId   String  @map("source_entity_id")
  targetEntityId   String  @map("target_entity_id")
  relationshipType String  @map("relationship_type")
  strength         Float?
  context          String?
  noteId           String? @map("note_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  sourceEntity Entity @relation("SourceEntity", fields: [sourceEntityId], references: [id])
  targetEntity Entity @relation("TargetEntity", fields: [targetEntityId], references: [id])
  note         Note?  @relation(fields: [noteId], references: [id])

  @@map("entity_relationships")
}

// User Preferences and Organization Models

/// Extended user profile information and application preferences
model UserProfile {
  id          String    @id
  fullName    String?   @map("full_name")
  username    String?   @unique
  avatarUrl   String?   @map("avatar_url")
  bio         String?
  preferences Json?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [id], references: [id])

  @@map("user_profiles")
}

/// User-defined collections for organizing and grouping notes
model Collection {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String
  description String?
  color       String?
  isDefault   Boolean?  @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  // Relations
  notes NoteCollection[]

  @@map("collections")
}

/// Many-to-many relationship between notes and collections
model NoteCollection {
  noteId       String    @map("note_id")
  collectionId String    @map("collection_id")
  createdAt    DateTime? @default(now()) @map("created_at")

  // Relations
  note       Note       @relation(fields: [noteId], references: [id])
  collection Collection @relation(fields: [collectionId], references: [id])

  @@id([noteId, collectionId])
  @@map("note_collections")
}

// Background Processing and Job Queue Models

/// Background jobs for AI processing, content extraction, and other async tasks
model ProcessingJob {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  noteId       String?   @map("note_id")
  jobType      String    @map("job_type")
  status       String?
  inputData    Json?     @map("input_data")
  outputData   Json?     @map("output_data")
  errorMessage String?   @map("error_message")
  createdAt    DateTime? @default(now()) @map("created_at")
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")

  // Relations
  note Note? @relation(fields: [noteId], references: [id])

  @@map("processing_jobs")
}